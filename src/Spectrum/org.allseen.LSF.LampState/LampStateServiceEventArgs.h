//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace allseen { namespace LSF { namespace LampState {

// Methods
public ref class LampStateTransitionLampStateCalledEventArgs sealed
{
public:
    LampStateTransitionLampStateCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ uint64 interfaceMemberTimestamp, _In_ Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ interfaceMemberNewState, _In_ uint32 interfaceMemberTransitionPeriod);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampStateTransitionLampStateResult^ Result
    {
        LampStateTransitionLampStateResult^ get() { return m_result; }
        void set(_In_ LampStateTransitionLampStateResult^ value) { m_result = value; }
    }

    property uint64 Timestamp
    {
        uint64 get() { return m_interfaceMemberTimestamp; }
    }

    property Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ NewState
    {
        Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ get() { return m_interfaceMemberNewState; }
    }

    property uint32 TransitionPeriod
    {
        uint32 get() { return m_interfaceMemberTransitionPeriod; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampStateTransitionLampStateResult^>^ GetResultAsync(LampStateTransitionLampStateCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampStateTransitionLampStateResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampStateTransitionLampStateResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampStateTransitionLampStateResult^ m_result;
    uint64 m_interfaceMemberTimestamp;
    Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ m_interfaceMemberNewState;
    uint32 m_interfaceMemberTransitionPeriod;
};

public ref class LampStateApplyPulseEffectCalledEventArgs sealed
{
public:
    LampStateApplyPulseEffectCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ interfaceMemberFromState, _In_ Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ interfaceMemberToState, _In_ uint32 interfaceMemberPeriod, _In_ uint32 interfaceMemberDuration, _In_ uint32 interfaceMemberNumPulses, _In_ uint64 interfaceMemberTimestamp);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampStateApplyPulseEffectResult^ Result
    {
        LampStateApplyPulseEffectResult^ get() { return m_result; }
        void set(_In_ LampStateApplyPulseEffectResult^ value) { m_result = value; }
    }

    property Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ FromState
    {
        Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ get() { return m_interfaceMemberFromState; }
    }

    property Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ ToState
    {
        Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ get() { return m_interfaceMemberToState; }
    }

    property uint32 Period
    {
        uint32 get() { return m_interfaceMemberPeriod; }
    }

    property uint32 Duration
    {
        uint32 get() { return m_interfaceMemberDuration; }
    }

    property uint32 NumPulses
    {
        uint32 get() { return m_interfaceMemberNumPulses; }
    }

    property uint64 Timestamp
    {
        uint64 get() { return m_interfaceMemberTimestamp; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampStateApplyPulseEffectResult^>^ GetResultAsync(LampStateApplyPulseEffectCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampStateApplyPulseEffectResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampStateApplyPulseEffectResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampStateApplyPulseEffectResult^ m_result;
    Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ m_interfaceMemberFromState;
    Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ m_interfaceMemberToState;
    uint32 m_interfaceMemberPeriod;
    uint32 m_interfaceMemberDuration;
    uint32 m_interfaceMemberNumPulses;
    uint64 m_interfaceMemberTimestamp;
};

// Readable Properties
public ref class LampStateGetVersionRequestedEventArgs sealed
{
public:
    LampStateGetVersionRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampStateGetVersionResult^ Result
    {
        LampStateGetVersionResult^ get() { return m_result; }
        void set(_In_ LampStateGetVersionResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampStateGetVersionResult^>^ GetResultAsync(LampStateGetVersionRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampStateGetVersionResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampStateGetVersionResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampStateGetVersionResult^ m_result;
};

public ref class LampStateGetOnOffRequestedEventArgs sealed
{
public:
    LampStateGetOnOffRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampStateGetOnOffResult^ Result
    {
        LampStateGetOnOffResult^ get() { return m_result; }
        void set(_In_ LampStateGetOnOffResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampStateGetOnOffResult^>^ GetResultAsync(LampStateGetOnOffRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampStateGetOnOffResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampStateGetOnOffResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampStateGetOnOffResult^ m_result;
};

public ref class LampStateGetHueRequestedEventArgs sealed
{
public:
    LampStateGetHueRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampStateGetHueResult^ Result
    {
        LampStateGetHueResult^ get() { return m_result; }
        void set(_In_ LampStateGetHueResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampStateGetHueResult^>^ GetResultAsync(LampStateGetHueRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampStateGetHueResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampStateGetHueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampStateGetHueResult^ m_result;
};

public ref class LampStateGetSaturationRequestedEventArgs sealed
{
public:
    LampStateGetSaturationRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampStateGetSaturationResult^ Result
    {
        LampStateGetSaturationResult^ get() { return m_result; }
        void set(_In_ LampStateGetSaturationResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampStateGetSaturationResult^>^ GetResultAsync(LampStateGetSaturationRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampStateGetSaturationResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampStateGetSaturationResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampStateGetSaturationResult^ m_result;
};

public ref class LampStateGetColorTempRequestedEventArgs sealed
{
public:
    LampStateGetColorTempRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampStateGetColorTempResult^ Result
    {
        LampStateGetColorTempResult^ get() { return m_result; }
        void set(_In_ LampStateGetColorTempResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampStateGetColorTempResult^>^ GetResultAsync(LampStateGetColorTempRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampStateGetColorTempResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampStateGetColorTempResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampStateGetColorTempResult^ m_result;
};

public ref class LampStateGetBrightnessRequestedEventArgs sealed
{
public:
    LampStateGetBrightnessRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampStateGetBrightnessResult^ Result
    {
        LampStateGetBrightnessResult^ get() { return m_result; }
        void set(_In_ LampStateGetBrightnessResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampStateGetBrightnessResult^>^ GetResultAsync(LampStateGetBrightnessRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampStateGetBrightnessResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampStateGetBrightnessResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampStateGetBrightnessResult^ m_result;
};

// Writable Properties
public ref class LampStateSetOnOffRequestedEventArgs sealed
{
public:
    LampStateSetOnOffRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ bool value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property bool Value
    {
        bool get() { return m_value; }
    }

    property LampStateSetOnOffResult^ Result
    {
        LampStateSetOnOffResult^ get() { return m_result; }
        void set(_In_ LampStateSetOnOffResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<LampStateSetOnOffResult^>^ GetResultAsync(LampStateSetOnOffRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampStateSetOnOffResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampStateSetOnOffResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    bool m_value;
    LampStateSetOnOffResult^ m_result;
};

public ref class LampStateSetHueRequestedEventArgs sealed
{
public:
    LampStateSetHueRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ uint32 value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property uint32 Value
    {
        uint32 get() { return m_value; }
    }

    property LampStateSetHueResult^ Result
    {
        LampStateSetHueResult^ get() { return m_result; }
        void set(_In_ LampStateSetHueResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<LampStateSetHueResult^>^ GetResultAsync(LampStateSetHueRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampStateSetHueResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampStateSetHueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    uint32 m_value;
    LampStateSetHueResult^ m_result;
};

public ref class LampStateSetSaturationRequestedEventArgs sealed
{
public:
    LampStateSetSaturationRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ uint32 value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property uint32 Value
    {
        uint32 get() { return m_value; }
    }

    property LampStateSetSaturationResult^ Result
    {
        LampStateSetSaturationResult^ get() { return m_result; }
        void set(_In_ LampStateSetSaturationResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<LampStateSetSaturationResult^>^ GetResultAsync(LampStateSetSaturationRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampStateSetSaturationResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampStateSetSaturationResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    uint32 m_value;
    LampStateSetSaturationResult^ m_result;
};

public ref class LampStateSetColorTempRequestedEventArgs sealed
{
public:
    LampStateSetColorTempRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ uint32 value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property uint32 Value
    {
        uint32 get() { return m_value; }
    }

    property LampStateSetColorTempResult^ Result
    {
        LampStateSetColorTempResult^ get() { return m_result; }
        void set(_In_ LampStateSetColorTempResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<LampStateSetColorTempResult^>^ GetResultAsync(LampStateSetColorTempRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampStateSetColorTempResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampStateSetColorTempResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    uint32 m_value;
    LampStateSetColorTempResult^ m_result;
};

public ref class LampStateSetBrightnessRequestedEventArgs sealed
{
public:
    LampStateSetBrightnessRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ uint32 value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property uint32 Value
    {
        uint32 get() { return m_value; }
    }

    property LampStateSetBrightnessResult^ Result
    {
        LampStateSetBrightnessResult^ get() { return m_result; }
        void set(_In_ LampStateSetBrightnessResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<LampStateSetBrightnessResult^>^ GetResultAsync(LampStateSetBrightnessRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampStateSetBrightnessResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampStateSetBrightnessResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    uint32 m_value;
    LampStateSetBrightnessResult^ m_result;
};

} } } } 
