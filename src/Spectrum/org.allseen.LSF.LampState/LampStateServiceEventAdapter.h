//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace allseen { namespace LSF { namespace LampState {

// This class, and the associated EventArgs classes, exist for the benefit of JavaScript developers who
// do not have the ability to implement ILampStateService. Instead, LampStateServiceEventAdapter
// provides the Interface implementation and exposes a set of compatible events to the developer.
public ref class LampStateServiceEventAdapter sealed : [Windows::Foundation::Metadata::Default] ILampStateService
{
public:
    // Method Invocation Events
    event Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateTransitionLampStateCalledEventArgs^>^ TransitionLampStateCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateTransitionLampStateCalledEventArgs^>^ handler) 
        { 
            return _TransitionLampStateCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampStateServiceEventAdapter^>(sender), safe_cast<LampStateTransitionLampStateCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _TransitionLampStateCalled -= token; 
        } 
    internal: 
        void raise(LampStateServiceEventAdapter^ sender, LampStateTransitionLampStateCalledEventArgs^ args) 
        { 
            _TransitionLampStateCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateApplyPulseEffectCalledEventArgs^>^ ApplyPulseEffectCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateApplyPulseEffectCalledEventArgs^>^ handler) 
        { 
            return _ApplyPulseEffectCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampStateServiceEventAdapter^>(sender), safe_cast<LampStateApplyPulseEffectCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _ApplyPulseEffectCalled -= token; 
        } 
    internal: 
        void raise(LampStateServiceEventAdapter^ sender, LampStateApplyPulseEffectCalledEventArgs^ args) 
        { 
            _ApplyPulseEffectCalled(sender, args);
        } 
    }

    // Property Read Events
    event Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateGetVersionRequestedEventArgs^>^ GetVersionRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateGetVersionRequestedEventArgs^>^ handler) 
        { 
            return _GetVersionRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampStateServiceEventAdapter^>(sender), safe_cast<LampStateGetVersionRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetVersionRequested -= token; 
        } 
    internal: 
        void raise(LampStateServiceEventAdapter^ sender, LampStateGetVersionRequestedEventArgs^ args) 
        { 
            _GetVersionRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateGetOnOffRequestedEventArgs^>^ GetOnOffRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateGetOnOffRequestedEventArgs^>^ handler) 
        { 
            return _GetOnOffRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampStateServiceEventAdapter^>(sender), safe_cast<LampStateGetOnOffRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetOnOffRequested -= token; 
        } 
    internal: 
        void raise(LampStateServiceEventAdapter^ sender, LampStateGetOnOffRequestedEventArgs^ args) 
        { 
            _GetOnOffRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateGetHueRequestedEventArgs^>^ GetHueRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateGetHueRequestedEventArgs^>^ handler) 
        { 
            return _GetHueRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampStateServiceEventAdapter^>(sender), safe_cast<LampStateGetHueRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetHueRequested -= token; 
        } 
    internal: 
        void raise(LampStateServiceEventAdapter^ sender, LampStateGetHueRequestedEventArgs^ args) 
        { 
            _GetHueRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateGetSaturationRequestedEventArgs^>^ GetSaturationRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateGetSaturationRequestedEventArgs^>^ handler) 
        { 
            return _GetSaturationRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampStateServiceEventAdapter^>(sender), safe_cast<LampStateGetSaturationRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetSaturationRequested -= token; 
        } 
    internal: 
        void raise(LampStateServiceEventAdapter^ sender, LampStateGetSaturationRequestedEventArgs^ args) 
        { 
            _GetSaturationRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateGetColorTempRequestedEventArgs^>^ GetColorTempRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateGetColorTempRequestedEventArgs^>^ handler) 
        { 
            return _GetColorTempRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampStateServiceEventAdapter^>(sender), safe_cast<LampStateGetColorTempRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetColorTempRequested -= token; 
        } 
    internal: 
        void raise(LampStateServiceEventAdapter^ sender, LampStateGetColorTempRequestedEventArgs^ args) 
        { 
            _GetColorTempRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateGetBrightnessRequestedEventArgs^>^ GetBrightnessRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateGetBrightnessRequestedEventArgs^>^ handler) 
        { 
            return _GetBrightnessRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampStateServiceEventAdapter^>(sender), safe_cast<LampStateGetBrightnessRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetBrightnessRequested -= token; 
        } 
    internal: 
        void raise(LampStateServiceEventAdapter^ sender, LampStateGetBrightnessRequestedEventArgs^ args) 
        { 
            _GetBrightnessRequested(sender, args);
        } 
    }

    // Property Write Events
    event Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateSetOnOffRequestedEventArgs^>^ SetOnOffRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateSetOnOffRequestedEventArgs^>^ handler) 
        { 
            return _SetOnOffRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampStateServiceEventAdapter^>(sender), safe_cast<LampStateSetOnOffRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _SetOnOffRequested -= token; 
        } 
    internal: 
        void raise(LampStateServiceEventAdapter^ sender, LampStateSetOnOffRequestedEventArgs^ args) 
        { 
            _SetOnOffRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateSetHueRequestedEventArgs^>^ SetHueRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateSetHueRequestedEventArgs^>^ handler) 
        { 
            return _SetHueRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampStateServiceEventAdapter^>(sender), safe_cast<LampStateSetHueRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _SetHueRequested -= token; 
        } 
    internal: 
        void raise(LampStateServiceEventAdapter^ sender, LampStateSetHueRequestedEventArgs^ args) 
        { 
            _SetHueRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateSetSaturationRequestedEventArgs^>^ SetSaturationRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateSetSaturationRequestedEventArgs^>^ handler) 
        { 
            return _SetSaturationRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampStateServiceEventAdapter^>(sender), safe_cast<LampStateSetSaturationRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _SetSaturationRequested -= token; 
        } 
    internal: 
        void raise(LampStateServiceEventAdapter^ sender, LampStateSetSaturationRequestedEventArgs^ args) 
        { 
            _SetSaturationRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateSetColorTempRequestedEventArgs^>^ SetColorTempRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateSetColorTempRequestedEventArgs^>^ handler) 
        { 
            return _SetColorTempRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampStateServiceEventAdapter^>(sender), safe_cast<LampStateSetColorTempRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _SetColorTempRequested -= token; 
        } 
    internal: 
        void raise(LampStateServiceEventAdapter^ sender, LampStateSetColorTempRequestedEventArgs^ args) 
        { 
            _SetColorTempRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateSetBrightnessRequestedEventArgs^>^ SetBrightnessRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampStateServiceEventAdapter^, LampStateSetBrightnessRequestedEventArgs^>^ handler) 
        { 
            return _SetBrightnessRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampStateServiceEventAdapter^>(sender), safe_cast<LampStateSetBrightnessRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _SetBrightnessRequested -= token; 
        } 
    internal: 
        void raise(LampStateServiceEventAdapter^ sender, LampStateSetBrightnessRequestedEventArgs^ args) 
        { 
            _SetBrightnessRequested(sender, args);
        } 
    }

    // ILampStateService Implementation
    virtual Windows::Foundation::IAsyncOperation<LampStateTransitionLampStateResult^>^ TransitionLampStateAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ uint64 interfaceMemberTimestamp, _In_ Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ interfaceMemberNewState, _In_ uint32 interfaceMemberTransitionPeriod);
    virtual Windows::Foundation::IAsyncOperation<LampStateApplyPulseEffectResult^>^ ApplyPulseEffectAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ interfaceMemberFromState, _In_ Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ interfaceMemberToState, _In_ uint32 interfaceMemberPeriod, _In_ uint32 interfaceMemberDuration, _In_ uint32 interfaceMemberNumPulses, _In_ uint64 interfaceMemberTimestamp);

    virtual Windows::Foundation::IAsyncOperation<LampStateGetVersionResult^>^ GetVersionAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<LampStateGetOnOffResult^>^ GetOnOffAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<LampStateGetHueResult^>^ GetHueAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<LampStateGetSaturationResult^>^ GetSaturationAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<LampStateGetColorTempResult^>^ GetColorTempAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<LampStateGetBrightnessResult^>^ GetBrightnessAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    virtual Windows::Foundation::IAsyncOperation<LampStateSetOnOffResult^>^ SetOnOffAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ bool value);
    virtual Windows::Foundation::IAsyncOperation<LampStateSetHueResult^>^ SetHueAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ uint32 value);
    virtual Windows::Foundation::IAsyncOperation<LampStateSetSaturationResult^>^ SetSaturationAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ uint32 value);
    virtual Windows::Foundation::IAsyncOperation<LampStateSetColorTempResult^>^ SetColorTempAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ uint32 value);
    virtual Windows::Foundation::IAsyncOperation<LampStateSetBrightnessResult^>^ SetBrightnessAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ uint32 value);

private:
    event Windows::Foundation::EventHandler<Platform::Object^>^ _TransitionLampStateCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _ApplyPulseEffectCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetVersionRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetOnOffRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetHueRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetSaturationRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetColorTempRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetBrightnessRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _SetOnOffRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _SetHueRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _SetSaturationRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _SetColorTempRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _SetBrightnessRequested;
};

} } } } 
